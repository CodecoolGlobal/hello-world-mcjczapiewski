hello-world:
  description: >-
    Implement the `hello_world()` function which returns “Hello, World!”
  tags: [proc-1, python-1]
  criteria:
    - MANDATORY! The returned string of the function is exactly "Hello, World!"
    - Function `hello_world()` does not print itself.

hello-param:
  description: >-
    Create and implement the parametrized function `hello(name)` with one string input which
    returns `"Hello, <name>!"`
  tags: [proc-1, python-1]
  criteria:
    - For any non-empty String return `"Hello, <name>!"`
    - If `name` is empty or None, return `"Hello, World!"`
    - Function `hello(name)` does not print itself

print-hello:
  description: >-
    Create and implement the `print_hello(name)` function which prints the result of `hello(name)`!
  tags: [proc-1, python-1]
  criteria:
    - Calling `print_hello(name)` prints `"Hello, <name>!"`
    - Function `print_hello()` calls `hello()` and uses its return value

print-args:
  description: >-
    Implement the main (outside any functions) part of `hello.py` so that it prints the result
    of `hello(name)` when called from the command line by `python3 hello.py <name>`
  tags: [proc-1, python-1]
  criteria:
    - Calling from the command line with one argument prints `"Hello, <name>!"` to the console
    - The command line call uses `hello(name)`'s return value

print-multiple-args:
  description: >-
    Implement the main (outside any functions) part of `hello.py` so that it prints the result
    of `hello(name)` when called from the command line with multiple arguments
    by `python3 hello.py <name1> <name2> <name3>`. The required result is
    `"Hello, <name1> <name2> <name3>!"`
  extra: yes
  tags: [proc-1, python-1]
  criteria:
    - Calling from the command line with multiple argument prints `"Hello, <name1> <name2> <name3>!"` to the console
    - The command line call uses `hello(name)`'s return value
    - It works for any number of arguments
